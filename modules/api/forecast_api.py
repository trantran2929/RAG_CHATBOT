from modules.ML.pipeline import smart_predict, predict_next_session
from modules.ML.pipeline import direction_from_return  # n·∫øu c·∫ßn reuse
from modules.api.time_api import get_now
from modules.api.stock_api import DATE_FMT  # d√πng l·∫°i format ng√†y
from typing import Dict, Any

def _safe_get(d: Dict, key: str, default=None):
    try:
        return d.get(key, default)
    except Exception:
        return default

def format_forecast_brief(symbol: str) -> str:
    """
    M√¥ t·∫£ ng·∫Øn g·ªçn xu h∆∞·ªõng cho symbol (v√≠ d·ª• d√πng khi intent='market').
    - N·∫øu ƒëang trong phi√™n: n√≥i d√≤ng ti·ªÅn / xu h∆∞·ªõng ng·∫Øn h·∫°n
    - N·∫øu ngo√†i gi·ªù: n√≥i d·ª± b√°o gap m·ªü c·ª≠a phi√™n t·ªõi
    Tr·∫£ string ti·∫øng Vi·ªát k√®m c·∫£nh b√°o tham kh·∫£o.
    """
    try:
        pack = smart_predict(symbol)
    except Exception:
        # fallback nh·∫π n·∫øu model l·ªói
        return ""

    sym = symbol.upper()
    mode = pack.get("mode")

    if mode == "in_session":
        dir_ = _safe_get(pack, "next_step_dir", "kh√≥ x√°c ƒë·ªãnh")
        conf = _safe_get(pack, "step_confidence", "low")
        return (
            f"\nüîé D√≤ng ti·ªÅn {sym}: th·ªã tr∆∞·ªùng ƒëang giao d·ªãch."
            f" Xu h∆∞·ªõng r·∫•t ng·∫Øn h·∫°n: **{dir_}**"
            f" (ƒë·ªô tin c·∫≠y {conf})."
        )

    # out_of_session / next_session
    # ∆Øu ti√™n d·ª± b√°o m·ªü c·ª≠a phi√™n t·ªõi
    open_direction = pack.get("open_direction")
    open_gap_pct = pack.get("open_gap_pct")
    if open_direction is not None and open_gap_pct is not None:
        return (
            f"\nüîé D·ª± b√°o phi√™n t·ªõi c·ªßa {sym}: kh·∫£ nƒÉng **{open_direction}**"
            f" kho·∫£ng {open_gap_pct:+.2f}%. (mang t√≠nh tham kh·∫£o)"
        )

    # Ho·∫∑c d·ª± b√°o PM (phi√™n chi·ªÅu)
    pm_direction = pack.get("pm_direction")
    pm_gap_pct = pack.get("pm_gap_pct")
    if pm_direction is not None and pm_gap_pct is not None:
        return (
            f"\nüîé D·ª± b√°o phi√™n chi·ªÅu c·ªßa {sym}: c√≥ th·ªÉ **{pm_direction}**"
            f" kho·∫£ng {pm_gap_pct:+.2f}%. (tham kh·∫£o)"
        )

    return ""


def format_forecast_text(symbol: str, pack: Dict[str, Any]) -> str:
    """
    Tr·∫£ l·ªùi chi ti·∫øt khi user h·ªèi d·ª± b√°o (intent='forecast').
    ƒê√¢y l√† b·∫£n verbose (gi·∫£i th√≠ch c√≥ AM/PM, d·∫£i gi√°, % thay ƒë·ªïi...).
    """
    sym = symbol.upper()
    mode = pack.get("mode", "")

    # 1. ƒëang trong phi√™n
    if mode == "in_session":
        session = pack.get("session", "AM/PM")
        dir_ = pack.get("next_step_dir") or "kh√≥ x√°c ƒë·ªãnh"
        conf = pack.get("step_confidence", "low")
        last_px = pack.get("last_px", None)
        path_pred = pack.get("path_pred", None)

        msg = [
            f"üìà D·ª± b√°o ng·∫Øn h·∫°n n·ªôi phi√™n cho {sym} ({session}):",
            f"- Xu h∆∞·ªõng k·∫ø ti·∫øp: **{dir_}** (ƒë·ªô tin c·∫≠y {conf})."
        ]
        if last_px:
            msg.append(f"- Gi√° hi·ªán t·∫°i kho·∫£ng ~{last_px:,.2f} VNƒê.")
        if path_pred is not None and hasattr(path_pred, 'tolist'):
            seq = path_pred.tolist()
            if seq:
                msg.append(
                    "- Qu·ªπ ƒë·∫°o d·ª± ki·∫øn (3 b∆∞·ªõc k·∫ø ti·∫øp): "
                    + ", ".join(f"{p:,.2f} VNƒê" for p in seq)
                    + " (tham kh·∫£o)."
                )
        msg.append("‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i khuy·∫øn ngh·ªã mua/b√°n.")
        return "\n".join(msg)

    # 2. n·∫øu l√† next_session (t·ª©c l√† d·ª± b√°o AM ho·∫∑c PM k·∫ø ti·∫øp)
    next_sess = pack.get("next_session")
    if mode == "next_session" and next_sess == "AM":
        band = pack.get("open_band", {})
        px_mean = band.get("px_mean")
        px_lo = band.get("px_lo")
        px_hi = band.get("px_hi")
        direction = pack.get("open_direction", "dao ƒë·ªông nh·∫π")
        gap_pct = pack.get("open_gap_pct", 0.0)
        conf = pack.get("open_confidence", "uncertain")
        target_day = pack.get("target_day")

        msg = [
            f"üìÖ Phi√™n s√°ng (AM) s·∫Øp t·ªõi c·ªßa {sym} ({target_day}):",
            f"- Gi√° m·ªü c·ª≠a d·ª± ki·∫øn kho·∫£ng {px_mean:,.2f} VNƒê "
            f"(d·∫£i {px_lo:,.2f} ~ {px_hi:,.2f}).",
            f"- D·ª± ki·∫øn {direction} kho·∫£ng {gap_pct:+.2f}%.",
            f"- M·ª©c ƒë·ªô t·ª± tin m√¥ h√¨nh: {conf}.",
            "‚ö†Ô∏è ƒê√¢y ch·ªâ l√† ∆∞·ªõc l∆∞·ª£ng d·ª±a tr√™n tin t·ª©c & h√†nh vi gi√° g·∫ßn nh·∫•t,"
            " kh√¥ng ph·∫£i khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞."
        ]
        return "\n".join(msg)

    if mode == "next_session" and next_sess == "PM":
        band = pack.get("pm_band", {})
        px_mean = band.get("px_mean")
        px_lo = band.get("px_lo")
        px_hi = band.get("px_hi")
        direction = pack.get("pm_direction", "dao ƒë·ªông nh·∫π")
        gap_pct = pack.get("pm_gap_pct", 0.0)
        conf = pack.get("pm_confidence", "uncertain")
        target_day = pack.get("target_day")

        msg = [
            f"üìÖ Phi√™n chi·ªÅu (PM) k·∫ø ti·∫øp c·ªßa {sym} ({target_day}):",
            f"- Gi√° tham chi·∫øu ƒë·∫ßu phi√™n chi·ªÅu d·ª± ki·∫øn quanh {px_mean:,.2f} VNƒê "
            f"(d·∫£i {px_lo:,.2f} ~ {px_hi:,.2f}).",
            f"- Khuynh h∆∞·ªõng {direction} kho·∫£ng {gap_pct:+.2f}%.",
            f"- ƒê·ªô tin c·∫≠y: {conf}.",
            "‚ö†Ô∏è ƒê√¢y l√† th√¥ng tin tham kh·∫£o, kh√¥ng ph·∫£i l·ªùi khuy√™n giao d·ªãch."
        ]
        return "\n".join(msg)

    # 3. n·∫øu l√† out_of_session (d·ª± b√°o phi√™n t·ªõi t·ªïng qu√°t)
    open_band = (
        pack.get("bands", {})
        .get("OPEN_am", {})
    )
    px_mean = open_band.get("px_mean")
    px_lo = open_band.get("px_lo")
    px_hi = open_band.get("px_hi")
    open_dir = pack.get("open_direction", "dao ƒë·ªông nh·∫π")
    open_gap_pct = pack.get("open_gap_pct", 0.0)
    conf = pack.get("open_confidence", "uncertain")
    target_day = pack.get("target_day")

    msg = [
        f"üìÖ Phi√™n ti·∫øp theo c·ªßa {sym} ({target_day}):",
        f"- M·ªü c·ª≠a d·ª± ki·∫øn quanh {px_mean:,.2f} VNƒê "
        f"(d·∫£i {px_lo:,.2f} ~ {px_hi:,.2f}).",
        f"- Xu h∆∞·ªõng kh·∫£ nƒÉng {open_dir} kho·∫£ng {open_gap_pct:+.2f}%",
        "  so v·ªõi gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t.",
        f"- M·ª©c t·ª± tin m√¥ h√¨nh: {conf}.",
        "‚ö†Ô∏è ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng th·ªëng k√™, KH√îNG ph·∫£i khuy·∫øn ngh·ªã mua/b√°n."
    ]
    return "\n".join(msg)


def get_forecast_brief_for_symbol(symbol: str) -> str:
    """
    Helper cho router.intent='market'.
    Tr·∫£ string ng·∫Øn g·ªçn n·ªëi ph√≠a sau market summary / stock info.
    """
    try:
        return format_forecast_brief(symbol)
    except Exception:
        return ""


def get_full_forecast_answer(symbol: str) -> str:
    """
    Helper cho router.intent='forecast'.
    Tr·∫£ c√¢u tr·∫£ l·ªùi ho√†n ch·ªânh (d√†i), safe ƒë·ªÉ g·ª≠i cho user.
    """
    try:
        pack = smart_predict(symbol)
    except Exception:
        # fallback n·∫øu smart_predict l·ªói, th·ª≠ d·ª± b√°o phi√™n t·ªõi c∆° b·∫£n
        pack = predict_next_session(symbol)

    return format_forecast_text(symbol, pack)
