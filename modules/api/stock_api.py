"""
STOCK API ‚Äî VNStock Only (Final Optimized + TTL Cache)
Cung c·∫•p API / h√†m ti·ªán √≠ch cho chatbot:
- L·∫•y d·ªØ li·ªáu ch·ªâ s·ªë (VNINDEX, VN30...)
- L·∫•y gi√° c·ªï phi·∫øu hi·ªán t·∫°i (real-time + fallback)
- L·∫•y top tƒÉng / gi·∫£m
- Cache TTL decorator
- Hi·ªÉn th·ªã ng√†y + gi·ªù th·ª±c t·∫ø
"""

import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="vnai.scope.profile")

from vnstock import Quote, Trading, Screener
from datetime import datetime, timedelta
import pytz, time
from functools import wraps

def TTLCache(ttl_seconds: int = 300, verbose: bool = False):
    """Cache k·∫øt qu·∫£ c·ªßa h√†m trong TTL (gi√¢y)."""
    def decorator(func):
        cache = {}

        @wraps(func)
        def wrapper(*args, **kwargs):
            key = (args, frozenset(kwargs.items()))
            now = time.time()
            if key in cache:
                value, timestamp = cache[key]
                if now - timestamp < ttl_seconds:
                    if verbose:
                        print(f"[Cache Hit] {func.__name__}")
                    return value
                else:
                    cache.pop(key, None)
            if verbose:
                print(f"[Cache Miss] {func.__name__}")
            value = func(*args, **kwargs)
            cache[key] = (value, now)
            return value
        return wrapper
    return decorator

def get_time_vn() -> str:
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    return datetime.now(tz).strftime("%d-%m-%Y %H:%M:%S")

@TTLCache(ttl_seconds=300)
def get_index_detail(index_code: str = "VNINDEX") -> dict:
    try:
        quote = Quote(symbol=index_code, source="VCI")
        df = quote.history(
            start=(datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d"),
            end=datetime.now().strftime("%Y-%m-%d")
        )
        if df.empty:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë.")
        last = df.iloc[-1]
        prev = df.iloc[-2] if len(df) > 1 else last
        change = last["close"] - prev["close"]
        percent = (change / prev["close"]) * 100 if prev["close"] else 0
        return {
            "ticker": index_code,
            "price": round(last["close"], 2),
            "change": round(change, 2),
            "percent_change": round(percent, 2),
            "open": round(last["open"], 2),
            "high": round(last["high"], 2),
            "low": round(last["low"], 2),
            "volume": int(last.get("volume", 0)),
            "timestamp": get_time_vn(),
            "source": "VNStock"
        }
    except Exception as e:
        print(f"[VNStock] L·ªói l·∫•y d·ªØ li·ªáu ch·ªâ s·ªë {index_code}: {e}")
        return {"ticker": index_code, "error": str(e)}

@TTLCache(ttl_seconds=60)
def get_stock_quote(symbol: str) -> dict:
    """L·∫•y gi√° c·ªï phi·∫øu real-time t·ª´ VNStock. Fallback sang l·ªãch s·ª≠ n·∫øu match_price=0."""
    if not symbol or len(symbol.strip()) < 3:
        return {"symbol": symbol, "error": "Symbol ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 3 ƒë·∫øn 10 k√Ω t·ª±."}

    try:
        trading = Trading()
        df = trading.price_board(symbols_list=[symbol])
        if df.empty:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu c·ªï phi·∫øu.")
        df.columns = [f"{a}_{b}" for a, b in df.columns]
        data = df.iloc[0].to_dict()

        price = data.get("match_match_price")
        ref_price = data.get("match_reference_price") or data.get("listing_ref_price")
        ceil_price = data.get("match_ceiling_price") or data.get("listing_ceiling")
        floor_price = data.get("match_floor_price") or data.get("listing_floor")
        volume_val = data.get("match_accumulated_volume") or data.get("match_match_vol") or 0

        if not price or price == 0:
            raise ValueError("Kh√¥ng c√≥ gi√° kh·ªõp l·ªánh h·ª£p l·ªá (match_price = 0).")

        change_val = float(price) - float(ref_price)
        change_pct = (change_val / float(ref_price) * 100) if ref_price else 0

        return {
            "symbol": symbol.upper(),
            "price": float(price),
            "open": float(ref_price),
            "high": float(ceil_price),
            "low": float(floor_price),
            "change": round(change_val, 2),
            "percent_change": round(change_pct, 2),
            "volume": int(volume_val),
            "timestamp": get_time_vn(),
            "source": "VNStock.Trading"
        }

    except Exception as e:
        print(f"[VNStock] L·ªói l·∫•y d·ªØ li·ªáu c·ªï phi·∫øu {symbol}: {e}")
        try:
            # fallback sang l·ªãch s·ª≠
            quote = Quote(symbol=symbol, source="VCI")
            df = quote.history(
                start=(datetime.now() - timedelta(days=5)).strftime("%Y-%m-%d"),
                end=datetime.now().strftime("%Y-%m-%d")
            )
            if not df.empty:
                last = df.iloc[-1]
                trade_date = (
                    datetime.strptime(str(last.name)[:10], "%Y-%m-%d").strftime("%d-%m-%Y")
                    if last.name else "phi√™n g·∫ßn nh·∫•t"
                )
                open_price = float(last.get("open", 0))
                close_price = float(last.get("close", 0))
                change_val = close_price - open_price
                change_pct = (change_val / open_price * 100) if open_price else 0
                return {
                    "symbol": symbol.upper(),
                    "price": close_price,
                    "open": open_price,
                    "high": float(last.get("high", 0)),
                    "low": float(last.get("low", 0)),
                    "change": round(change_val, 2),
                    "percent_change": round(change_pct, 2),
                    "volume": int(last.get("volume", 0)),
                    "timestamp": get_time_vn(),
                    "fallback": True,
                    "fallback_date": trade_date,
                    "source": "VNStock.Quote"
                }
        except Exception as ex:
            print(f"[VNStock] Fallback Quote l·ªói: {ex}")
        return {"symbol": symbol.upper(), "error": str(e)}
    
@TTLCache(ttl_seconds=300)
def get_top_stocks(limit: int = 10, direction: str = "up") -> list:
    try:
        screener_df = Screener().stock(params={"exchangeName": "HOSE,HNX,UPCOM"}, limit=3000)
        if screener_df.empty:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu s√†ng l·ªçc.")
        cols = [c.lower() for c in screener_df.columns]
        growth_col = next((c for c in screener_df.columns if "growth" in c.lower()), None)
        if not growth_col:
            raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt tƒÉng tr∆∞·ªüng gi√° h·ª£p l·ªá.")
        screener_df[growth_col] = screener_df[growth_col].astype(float)
        ascending = True if direction == "down" else False
        top_df = screener_df.sort_values(growth_col, ascending=ascending).head(limit)
        results = []
        for _, row in top_df.iterrows():
            results.append({
                "symbol": row.get("ticker") or row.get("symbol"),
                "exchange": row.get("exchange", ""),
                "price": row.get("price_near_realtime") or row.get("close_price"),
                "pct_change": round(float(row[growth_col]), 2),
                "volume": int(row.get("avg_trading_value_10d", 0)),
                "timestamp": get_time_vn()
            })
        return results
    except Exception as e:
        print(f"[VNStock] L·ªói l·∫•y top c·ªï phi·∫øu: {e}")
        return []

@TTLCache(ttl_seconds=300)
def get_history_prices(symbol: str, days: int = 7) -> dict:
    """
    L·∫•y l·ªãch s·ª≠ gi√° c·ªï phi·∫øu trong N ng√†y g·∫ßn nh·∫•t t·ª´ VNStock.
    Tr·∫£ v·ªÅ danh s√°ch dict: [{date, open, high, low, close, volume, change, pct_change}]
    """
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.now(tz)
    start_date = (now - timedelta(days=days + 2)).strftime("%Y-%m-%d")
    end_date = now.strftime("%Y-%m-%d")

    if not symbol or len(symbol.strip()) < 3:
        return {"symbol": symbol, "error": "Symbol ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 3 ƒë·∫øn 10 k√Ω t·ª±."}

    try:
        quote = Quote(symbol=symbol.upper(), source="VCI")
        df = quote.history(start=start_date, end=end_date)

        if df.empty:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.")

        # T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi so v·ªõi phi√™n tr∆∞·ªõc
        df["change"] = df["close"].diff()
        df["pct_change"] = df["close"].pct_change() * 100
        df = df.dropna()

        records = []
        for idx, row in df.tail(days).iterrows():
            trade_date = idx.strftime("%d-%m-%Y") if isinstance(idx, datetime) else str(idx)
            records.append({
                "date": trade_date,
                "open": float(row["open"]),
                "high": float(row["high"]),
                "low": float(row["low"]),
                "close": float(row["close"]),
                "volume": int(row.get("volume", 0)),
                "change": round(float(row["change"]), 2),
                "pct_change": round(float(row["pct_change"]), 2)
            })

        return {
            "symbol": symbol.upper(),
            "history": records,
            "days": days,
            "timestamp": get_time_vn(),
            "source": "VNStock.Quote"
        }

    except Exception as e:
        print(f"[VNStock] L·ªói l·∫•y l·ªãch s·ª≠ gi√° {symbol}: {e}")
        return {"symbol": symbol.upper(), "error": str(e)}
    
def format_stock_info(symbol: str) -> str:
    data = get_stock_quote(symbol)
    if "error" in data or not data.get("price"):
        return f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho m√£ **{symbol.upper()}**."
    note = ""
    if data.get("fallback"):
        note = f" _(gi√° ƒë√≥ng c·ª≠a c·ªßa {data.get('fallback_date', 'phi√™n g·∫ßn nh·∫•t')})_"
    return (
        f"üìä **{data['symbol']}** ‚Äî Gi√° hi·ªán t·∫°i: {data['price']:,} VNƒê  \n"
        f"‚Ä¢ M·ªü c·ª≠a: {data['open']:,} | Cao nh·∫•t: {data['high']:,} | Th·∫•p nh·∫•t: {data['low']:,}  \n"
        f"‚Ä¢ Thay ƒë·ªïi: {data['change']:+.2f} ({data['percent_change']:+.2f}%)  \n"
        f"‚Ä¢ Kh·ªëi l∆∞·ª£ng: {data['volume']:,}  \n"
        f"üïí C·∫≠p nh·∫≠t: {data['timestamp']}{note}"
    )

def format_top_stocks(direction="up", limit=5) -> str:
    tops = get_top_stocks(limit=limit, direction=direction)
    arrow = "üî∫" if direction == "up" else "üîª"
    title = "Top c·ªï phi·∫øu tƒÉng m·∫°nh" if direction == "up" else "Top c·ªï phi·∫øu gi·∫£m m·∫°nh"
    if not tops:
        return f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu {title.lower()}."
    lines = [f"{arrow} {t['symbol']} ({t['pct_change']}%)" for t in tops]
    return f"üìä **{title}**  \n" + "  \n".join(lines)

@TTLCache(ttl_seconds=300)
def format_market_summary(indices: list[str] = None) -> str:
    try:
        if indices is None:
            indices = ["VNINDEX", "VN30", "HNX", "UPCOM"]
        
        summaries = []
        for idx in indices:
            data = get_index_detail(idx)
            if "error" in data:
                continue
            emoji = "üìà" if data["change"] > 0 else "üìâ" if data["change"] < 0 else "‚è∏Ô∏è"
            summaries.append(
                f"{emoji} **{data['ticker']}**: {data['price']:,} ƒëi·ªÉm "
                f"({data['change']:+.2f}, {data['percent_change']:+.2f}%)"
            )

            if not summaries:
                return "‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng."
            
        return (
            f"üìä **T·ªîNG QUAN TH·ªä TR∆Ø·ªúNG VI·ªÜT NAM**  \n" +
            "  \n".join(summaries) + "  \n\n" +
            f"{format_top_stocks('up', 3)}  \n\n" +
            f"{format_top_stocks('down', 3)}  \n" +
            f"üïí C·∫≠p nh·∫≠t: {get_time_vn()}"
        )
    except Exception as e:
        print(f"[VNStock] L·ªói t√≥m t·∫Øt th·ªã tr∆∞·ªùng: {e}")
        return "‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng."

