from modules.core.state import GlobalState
from modules.api.time_api import get_datetime_context

SYSTEM_INSTRUCTION = """
B·∫°n l√† **tr·ª£ l√Ω AI t√†i ch√≠nh Vi·ªát Nam**, chuy√™n ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng, c·ªï phi·∫øu v√† tin t·ª©c.
1. Khi intent = 'market' th√¨ K·∫æT H·ª¢P d·ªØ li·ªáu API (gi√° c·ªï phi·∫øu, th·ªã tr∆∞·ªùng) v·ªõi tin t·ª©c (Context).
2. Khi intent = 'stock' th√¨ Tr√¨nh b√†y th√¥ng tin gi√° c·ªï phi·∫øu ng·∫Øn g·ªçn.
3. KH√îNG khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ tuy·ªát ƒë·ªëi.
"""

CONSTRAINTS = """
- Lu√¥n tr·∫£ l·ªùi b·∫±ng TI·∫æNG VI·ªÜT, ng·∫Øn g·ªçn, t·ª± nhi√™n.
- KH√îNG d√πng m√£ code, KH√îNG in c·∫•u tr√∫c JSON.
- KH√îNG n√≥i ‚ÄúT√¥i kh√¥ng ph·∫£i chuy√™n gia t√†i ch√≠nh‚Äù.
- Gi·ªØ nguy√™n c√°c k√Ω hi·ªáu nh∆∞ VNINDEX, VCB, VN30,...
"""

INTENT_TASKS = {
    "market": "Ph√¢n t√≠ch xu h∆∞·ªõng c·ªï phi·∫øu ho·∫∑c th·ªã tr∆∞·ªùng b·∫±ng c√°ch k·∫øt h·ª£p d·ªØ li·ªáu API v√† tin t·ª©c g·∫ßn nh·∫•t.",
    "stock": "Cung c·∫•p th√¥ng tin gi√° c·ªï phi·∫øu hi·ªán t·∫°i ho·∫∑c l·ªãch s·ª≠.",
    "weather": "Cung c·∫•p th√¥ng tin th·ªùi ti·∫øt t·∫°i ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c h·ªèi.",
    "time": "Cung c·∫•p th√¥ng tin th·ªùi gian hi·ªán t·∫°i ho·∫∑c m·ªëc th·ªùi gian c·ª• th·ªÉ.",
    "rag": "Ph√¢n t√≠ch t·ªïng h·ª£p d·ª±a tr√™n ng·ªØ c·∫£nh tin t·ª©c ho·∫∑c d·ªØ li·ªáu trong vector DB.",
    "greeting": "Ph·∫£n h·ªìi ch√†o h·ªèi ho·∫∑c gi·ªõi thi·ªáu kh·∫£ nƒÉng tr·ª£ l√Ω t√†i ch√≠nh."
}


def build_prompt(state: GlobalState, max_context_chars: int = 5000) -> GlobalState:
    """
    Sinh prompt ƒë·ªông cho chatbot ƒëa-intent (t√†i ch√≠nh, th·ªùi ti·∫øt, th·ªùi gian, tin t·ª©c, v.v.)
    """
    if getattr(state, "route_to", "") not in ["rag", "hybrid"]:
        state.prompt = ""
        state.add_debug("prompt_builder", "Skipped (no LLM required)")
        state.llm_status = "prompt_skipped"
        return state

    lang = getattr(state, "lang", "vi")
    intent = getattr(state, "intent", "rag")
    task = INTENT_TASKS.get(intent, "Ph·∫£n h·ªìi th√¥ng tin t·ªïng qu√°t.")
    user_input = (state.user_query or state.processed_query or "").strip()

    prompt_parts = []
    prompt_parts = [
        f"## Instruction:\n{SYSTEM_INSTRUCTION.strip()}",
        f"## Constraints:\n{CONSTRAINTS.strip()}",
        f"## B·ªëi c·∫£nh th·ªùi gian:\n{get_datetime_context().strip()}\n"
    ]
    context = getattr(state, "context", "").strip()
    if context:
        prompt_parts.append("\n## Retrieved Context:\nD∆∞·ªõi ƒë√¢y l√† c√°c tin t·ª©c g·∫ßn nh·∫•t, h√£y ∆∞u ti√™n s·ª≠ d·ª•ng ch√∫ng ƒë·ªÉ ph√¢n t√≠ch th·ªã tr∆∞·ªùng:\n")
        if len(context) > max_context_chars:
            context = context[:max_context_chars] + "..."
        prompt_parts.append(context)
    else:
        prompt_parts.append("\n## Retrieved Context:\n(Tin t·ª©c g·∫ßn ƒë√¢y ch∆∞a kh·∫£ d·ª•ng ho·∫∑c kh√¥ng ph√π h·ª£p.)")

    if getattr(state, "api_response", None):
        prompt_parts.append("## D·ªØ li·ªáu API:\n" + state.api_response.strip())
    # prompt_parts.append("""
    #     ### V√≠ d·ª• minh h·ªça c√°ch k·∫øt h·ª£p d·ªØ li·ªáu gi√° & tin t·ª©c:
    #     **D·ªØ li·ªáu gi√°:**
    #     üìä VCB ‚Äî Gi√° hi·ªán t·∫°i: 62,500 VNƒê (-0.95%)

    #     **Tin t·ª©c:**
    #     VN-Index xu·∫•t hi·ªán t√≠n hi·ªáu t·∫°o ƒë·ªânh ng·∫Øn h·∫°n, nh√≥m ch·ª©ng kho√°n b√°o l·ªó qu√Ω 3/2025.

    #     **Tr·∫£ l·ªùi m·∫´u:**
    #     H√¥m nay c·ªï phi·∫øu VCB gi·∫£m 0.95%, di·ªÖn bi·∫øn c√πng xu h∆∞·ªõng ƒëi·ªÅu ch·ªânh chung c·ªßa th·ªã tr∆∞·ªùng
    #     khi VN-Index c√≥ t√≠n hi·ªáu t·∫°o ƒë·ªânh ng·∫Øn h·∫°n. M·ªôt s·ªë th√¥ng tin ti√™u c·ª±c t·ª´ nh√≥m ch·ª©ng kho√°n
    #     g√¢y √°p l·ª±c ch·ªët l·ªùi, khi·∫øn d√≤ng ti·ªÅn tr·ªü n√™n th·∫≠n tr·ªçng. Xu h∆∞·ªõng ng·∫Øn h·∫°n: gi·∫£m nh·∫π.
    #     """)

    history_msgs = (getattr(state, "conversation_history", []) or [])[-5:]
    if history_msgs:
        lines = []
        for msg in history_msgs:
            role = msg.get("role", "").capitalize()
            content = msg.get("content", "").strip()
            if role in ["User", "Assistant"] and content:
                lines.append(f"**{role}:** {content}")
        if lines:
            prompt_parts.append("## Conversation History:\n" + "\n".join(lines))

    prompt_parts.append(f"## Task Type:\nIntent: {intent}\nM√¥ t·∫£: {task}\n")
    prompt_parts.append(f"## Task Input:\n**User:** {user_input}\n")

    if lang == "vi":
        lang_instruction = "- Lu√¥n tr·∫£ l·ªùi b·∫±ng TI·∫æNG VI·ªÜT n·∫øu c√≥ t·ª´ ng·ªØ chuy√™n ng√†nh (VNINDEX, VN30,..) th√¨ gi·ªØ nguy√™n."
    else:
        lang_instruction = f"- ∆Øu ti√™n tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ '{lang}'."

    state.prompt = "\n\n".join([
        lang_instruction,
        "\n".join(prompt_parts),
        "## Task Output:",
        "**Assistant:**"
    ]).strip()

    state.llm_status = "prompt_built_success"
    state.add_debug("prompt_intent", intent)
    state.add_debug("prompt_status", "built_success")

    return state
